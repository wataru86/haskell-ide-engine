jobs:
- job: Windows_Stack
  timeoutInMinutes: 0
  pool:
    vmImage: windows-2019
  strategy:
    matrix:
      stack-def:
        YAML_FILE: stack.yaml
      stack-8.6.5:
        YAML_FILE: stack-8.6.5.yaml
      stack-8.6.4:
        YAML_FILE: stack-8.6.4.yaml
      stack-8.4.4:
        YAML_FILE: stack-8.4.4.yaml
      stack-8.4.3:
        YAML_FILE: stack-8.4.3.yaml
      stack-8.4.2:
        YAML_FILE: stack-8.4.2.yaml
  variables:
    STACK_ROOT: "D:\\sr"
    CABAL_VERSION: "3.0.0.0"

  steps:
  - task: Cache@2
    inputs:
      key: '"stack" | "$(Agent.OS)" | $(Build.SourcesDirectory)/$(YAML_FILE)'
      path: .azure-cache
      cacheHitVar: CACHE_RESTORED
    displayName: "Cache stack-root"
  - bash: |
      mkdir -p $STACK_ROOT
      tar -vxzf .azure-cache/stack-root.tar.gz -C /d
      mkdir -p .stack-work
      tar -vxzf .azure-cache/stack-work.tar.gz
    displayName: "Unpack cache"
    condition: eq(variables.CACHE_RESTORED, 'true')
  - bash: |
      git submodule sync
      git submodule update --init
    displayName: Sync submodules
  - bash: |
      curl -sSkL http://www.stackage.org/stack/windows-x86_64 -o /usr/bin/stack.zip
      unzip -o /usr/bin/stack.zip -d /usr/bin/
      mkdir -p "$STACK_ROOT"
      echo "local-programs-path: D:/bin/stack" > "$STACK_ROOT/config.yaml"
    displayName: Install stack
  - bash: |
      source .azure/windows-stack.bashrc
      stack setup --stack-yaml $(YAML_FILE)
      stack setup --resolver=lts-13.20 # for liquidhaskell
    displayName: Install GHC
  - bash: |
      source .azure/windows-stack.bashrc
      STACK_CMD="stack build --stack-yaml $(YAML_FILE) --only-dependencies"
      # Some executions fails with spurious errors installing executables
      $STACK_CMD || $STACK_CMD
    displayName: Build dependencies
  - bash: |
      source .azure/windows-stack.bashrc
      stack build --stack-yaml $(YAML_FILE)
    displayName: Build `hie`
  - bash: |
      source .azure/windows-stack.bashrc
      stack install --stack-yaml $(YAML_FILE) # `hie` binary required locally for tests
      mkdir .azure-deploy
      stack install --stack-yaml $(YAML_FILE) --local-bin-path .azure-deploy
      cd .azure-deploy
      if [ $YAML_FILE != "stack.yaml" ]; then
        GHC_VERSION=${YAML_FILE:6:5}
        GHC_MAJOR_VERSION=${YAML_FILE:6:3}
        cp hie.exe hie-$GHC_VERSION.exe
        cp hie.exe hie-$GHC_MAJOR_VERSION.exe
      else
        GHC_VERSION=nightly
      fi
      ARTIFACT_NAME=hie-$(hie --numeric-version)-ghc-$GHC_VERSION-windows-x86_64
      7z a "$(Build.ArtifactStagingDirectory)/$ARTIFACT_NAME.zip" *
    displayName: Install `hie`
  - bash: |
      source .azure/windows-stack.bashrc
      stack build --stack-yaml $(YAML_FILE) --test --bench --only-dependencies
    displayName: Build Test-dependencies
  - bash: |
      mkdir -p /usr/local
      curl -L https://github.com/Z3Prover/z3/releases/download/Z3-4.8.5/z3-4.8.5-x64-win.zip -o /usr/local/z3.zip
      unzip -o /usr/local/z3.zip -d /usr/local/
    displayName: "Install Runtime Test-Dependencies: z3"
  - bash: |
      source .azure/windows-stack.bashrc
      stack install --resolver=lts-13.20 liquid-fixpoint-0.8.0.2 liquidhaskell-0.8.6.2
    displayName: "Install Runtime Test-Dependencies: liquidhaskell"
  - bash: |
      source .azure/windows-stack.bashrc
      stack build hoogle --stack-yaml=$(YAML_FILE)
      stack exec hoogle generate --stack-yaml=$(YAML_FILE)
    displayName: "Install Runtime Test-Dependencies: hoogle database"
  - bash: |
      source .azure/windows-stack.bashrc
      choco install -y cabal --version $CABAL_VERSION
      /C/ProgramData/chocolatey/bin/RefreshEnv.cmd
    displayName: "Install Runtime Test-Dependencies: cabal"
  - bash: |
      source .azure/windows-stack.bashrc
      # TODO: Enable CabalHelper unit tests, see https://github.com/DanielG/cabal-helper/issues/91
      if [ $YAML_FILE = "stack-8.6.4.yaml" ]; then
        TEST_ARGS=--test-arguments="--skip=CabalHelper"
      fi
      stack test :unit-test $TEST_ARGS --stack-yaml $(YAML_FILE)
    displayName: "Run Test: unit-test"
  # TODO: Enable rest of test suites in windows
  - bash: |
      source .azure/windows-stack.bashrc
      stack test :dispatcher-test :plugin-dispatcher-test :wrapper-test --stack-yaml $(YAML_FILE)
    displayName: "Run Test: dispatcher-test, plugin-dispatcher-test and wrapper-test"
    condition: False
  - bash: |
      source .azure/windows-stack.bashrc
      if [ $YAML_FILE != "stack-8.6.4.yaml" ]; then
          stack test --stack-yaml $(YAML_FILE) :func-test
      else
          stack test --stack-yaml $(YAML_FILE) :func-test --ta="--skip \"/Hover/hover/works\""
      fi
    displayName: "Run Test: func-test"
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: hie-$(Agent.OS)-$(YAML_FILE)
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues')
  - bash: |
      mkdir -p .azure-cache
      tar -vczf .azure-cache/stack-root.tar.gz $(cygpath $STACK_ROOT)
      tar -vczf .azure-cache/stack-work.tar.gz .stack-work
    displayName: "Pack cache"
